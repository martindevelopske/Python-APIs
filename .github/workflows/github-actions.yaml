name: build and deploy code
on:
  push:
    branches:
      - main
jobs:
  job1:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      db_user: ${{ secrets.DB_USER }}
      db_password: ${{ secrets.DB_PASSWORD }}
      db_host: ${{ secrets.DB_HOST }}
      db_port: ${{ secrets.DB_PORT }}
      db_name: ${{ secrets.DB_NAME }}
      secret_key: ${{ secrets.SECRET_KEY }}
      alg: "HS256"
      exp: 300
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: setup python v3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all the dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest tests/test_calculations.py

      # Authenticate to the container registry
      - name: Authenticate to registry(dockerhub)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.docker_hub_username }}
          password:
            ${{ secrets.dockerhub_accesstoken }}
            # Compare the image built in the pull request with the one in production
      - name: Docker Scout
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to-env: production
          ignore-unchanged: true
          only-severities: critical,high
          github-token: ${{ secrets.GITHUB_TOKEN }}
        # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.docker_hub_username }}/fast-api-test
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short
      # Build and push Docker image with Buildx
      # (don't push on PR, load instead)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
